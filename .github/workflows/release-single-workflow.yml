name: Release Single Workflow

on:
  workflow_dispatch:
    inputs:
      workflow_file:
        description: 'The file name of the workflow to tag/release'
        required: true
        type: string
      version_type:
        description: 'Which semantic version to upgrade'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: 'patch'

jobs:
  tag-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Git User
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Get Workflow Name
        id: workflow-name
        run: |
          WORKFLOW_FILE=${{ github.event.inputs.workflow_file }}
          WORKFLOW_NAME=$(basename "$WORKFLOW_FILE" .yml)
          CLEAN_NAME=${WORKFLOW_NAME/reusable-/}
          echo "clean_name=$CLEAN_NAME" >> $GITHUB_OUTPUT
          echo "Working with workflow: $CLEAN_NAME"

      - name: Get Latest Tag
        id: get-latest-tag
        run: |
          TAG_PREFIX="${{ steps.workflow-name.outputs.clean_name }}-"
          
          # Fetch all tags that match the prefix
          LATEST_TAG=$(git tag -l "${TAG_PREFIX}*" | sort -V | tail -n 1)
          
          if [ -z "$LATEST_TAG" ]; then
            echo "No previous tag found. Starting with v0.0.0"
            CURRENT_VERSION="0.0.0"
          else
            CURRENT_VERSION=${LATEST_TAG#$TAG_PREFIX}
            CURRENT_VERSION=${CURRENT_VERSION#v}
            echo "Latest tag found: $LATEST_TAG with version $CURRENT_VERSION"
          fi
          
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "tag_prefix=$TAG_PREFIX" >> $GITHUB_OUTPUT

      - name: Calculate New Version
        id: semver
        run: |
          CURRENT_VERSION=${{ steps.get-latest-tag.outputs.current_version }}
          VERSION_TYPE=${{ github.event.inputs.version_type }}
          
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          case "$VERSION_TYPE" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          NEW_TAG="${{ steps.get-latest-tag.outputs.tag_prefix }}${NEW_VERSION}"
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "New version will be: $NEW_VERSION with tag $NEW_TAG"

      - name: Create and Push Tag
        run: |
          git tag ${{ steps.semver.outputs.new_tag }}
          git push origin ${{ steps.semver.outputs.new_tag }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.semver.outputs.new_tag }}
          name: ${{ steps.semver.outputs.new_tag }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
